
# Generated by Qodo Gen
from agent import fetch_sitemap_urls
import requests


# Dependencies:
# pip install pytest-mock
import pytest

class TestFetchSitemapUrls:

    # Successfully fetches and parses a valid sitemap XML
    def test_successful_sitemap_fetch(self, mocker):
        # Arrange
        mock_response = mocker.Mock()
        mock_response.content = '''<?xml version="1.0" encoding="UTF-8"?>
            <urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
                <url><loc>https://example.com/page1</loc></url>
                <url><loc>https://example.com/page2</loc></url>
            </urlset>'''
        mock_get = mocker.patch('requests.get', return_value=mock_response)
        mock_log = mocker.patch('logging.info')
    
        # Act
        result = fetch_sitemap_urls('https://example.com/sitemap.xml')
    
        # Assert
        assert len(result) == 2
        assert 'https://example.com/page1' in result
        assert 'https://example.com/page2' in result
        mock_get.assert_called_once_with('https://example.com/sitemap.xml', timeout=10)
        mock_log.assert_called_once()

    # Handles network timeouts gracefully
    def test_network_timeout_handling(self, mocker):
        # Arrange
        mock_get = mocker.patch('requests.get', side_effect=requests.exceptions.Timeout("Connection timed out"))
        mock_log = mocker.patch('logging.error')
    
        # Act
        result = fetch_sitemap_urls('https://example.com/sitemap.xml')
    
        # Assert
        assert result == []
        mock_get.assert_called_once_with('https://example.com/sitemap.xml', timeout=10)
        mock_log.assert_called_once()
        assert "Error fetching sitemap" in mock_log.call_args[0][0]

    # Returns a list of URLs extracted from sitemap loc elements
    def test_fetch_sitemap_urls_success(self, mocker):
        # Arrange
        mock_response = mocker.Mock()
        mock_response.content = '''<?xml version="1.0" encoding="UTF-8"?>
            <urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
                <url><loc>https://example.com/page1</loc></url>
                <url><loc>https://example.com/page2</loc></url>
            </urlset>'''
        mock_get = mocker.patch('requests.get', return_value=mock_response)
        mock_log_info = mocker.patch('logging.info')

        # Act
        result = fetch_sitemap_urls('https://example.com/sitemap.xml')

        # Assert
        assert len(result) == 2
        assert 'https://example.com/page1' in result
        assert 'https://example.com/page2' in result
        mock_get.assert_called_once_with('https://example.com/sitemap.xml', timeout=10)
        mock_log_info.assert_called_once_with('Fetched 2 URLs from sitemap: https://example.com/sitemap.xml')

    # Handles XML with proper namespace declarations
    def test_handles_xml_with_namespace(self, mocker):
        # Arrange
        mock_response = mocker.Mock()
        mock_response.content = '''<?xml version="1.0" encoding="UTF-8"?>
            <urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
                <url><loc>https://example.com/page1</loc></url>
                <url><loc>https://example.com/page2</loc></url>
            </urlset>'''
        mock_get = mocker.patch('requests.get', return_value=mock_response)
        mock_log_info = mocker.patch('logging.info')
        mock_log_error = mocker.patch('logging.error')

        # Act
        result = fetch_sitemap_urls('https://example.com/sitemap.xml')

        # Assert
        assert len(result) == 2
        assert 'https://example.com/page1' in result
        assert 'https://example.com/page2' in result
        mock_get.assert_called_once_with('https://example.com/sitemap.xml', timeout=10)
        mock_log_info.assert_called_once()
        mock_log_error.assert_not_called()

    # Logs the number of URLs fetched with info level
    def test_logs_number_of_urls_fetched(self, mocker):
        # Arrange
        mock_response = mocker.Mock()
        mock_response.content = '''<?xml version="1.0" encoding="UTF-8"?>
            <urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
                <url><loc>https://example.com/page1</loc></url>
                <url><loc>https://example.com/page2</loc></url>
            </urlset>'''
        mock_get = mocker.patch('requests.get', return_value=mock_response)
        mock_log_info = mocker.patch('logging.info')

        # Act
        fetch_sitemap_urls('https://example.com/sitemap.xml')

        # Assert
        mock_log_info.assert_called_once_with('Fetched 2 URLs from sitemap: https://example.com/sitemap.xml')

    # Handles network timeouts gracefully (returns empty list)
    def test_network_timeout_handling(self, mocker):
        # Arrange
        mock_get = mocker.patch('requests.get', side_effect=requests.exceptions.Timeout)
        mock_log = mocker.patch('logging.error')

        # Act
        result = fetch_sitemap_urls('https://example.com/sitemap.xml')

        # Assert
        assert result == []
        mock_get.assert_called_once_with('https://example.com/sitemap.xml', timeout=10)
        mock_log.assert_called_once()

    # Handles HTTP error responses (4xx, 5xx) properly
    def test_http_error_handling(self, mocker):
        # Arrange
        mock_response = mocker.Mock()
        mock_response.raise_for_status.side_effect = requests.exceptions.HTTPError("404 Client Error")
        mock_get = mocker.patch('requests.get', return_value=mock_response)
        mock_log = mocker.patch('logging.error')

        # Act
        result = fetch_sitemap_urls('https://example.com/sitemap.xml')

        # Assert
        assert result == []
        mock_get.assert_called_once_with('https://example.com/sitemap.xml', timeout=10)
        mock_log.assert_called_once_with("Error fetching sitemap https://example.com/sitemap.xml: 404 Client Error")

    # Correctly processes empty but valid sitemaps (returns empty list)
    def test_empty_sitemap_returns_empty_list(self, mocker):
        # Arrange
        mock_response = mocker.Mock()
        mock_response.content = '''<?xml version="1.0" encoding="UTF-8"?>
            <urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
            </urlset>'''
        mock_get = mocker.patch('requests.get', return_value=mock_response)
        mock_log_info = mocker.patch('logging.info')
        mock_log_error = mocker.patch('logging.error')

        # Act
        result = fetch_sitemap_urls('https://example.com/empty_sitemap.xml')

        # Assert
        assert result == []
        mock_get.assert_called_once_with('https://example.com/empty_sitemap.xml', timeout=10)
        mock_log_info.assert_called_once_with('Fetched 0 URLs from sitemap: https://example.com/empty_sitemap.xml')
        mock_log_error.assert_not_called()

    # Handles malformed XML content
    def test_malformed_xml_handling(self, mocker):
        # Arrange
        mock_response = mocker.Mock()
        mock_response.content = '''<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
            <url><loc>https://example.com/page1</loc></url>
            <url><loc>https://example.com/page2</loc></url>'''  # Missing closing tag for urlset
        mock_get = mocker.patch('requests.get', return_value=mock_response)
        mock_log_error = mocker.patch('logging.error')

        # Act
        result = fetch_sitemap_urls('https://example.com/sitemap.xml')

        # Assert
        assert result == []
        mock_get.assert_called_once_with('https://example.com/sitemap.xml', timeout=10)
        mock_log_error.assert_called_once()

    # Handles missing namespace in sitemap XML
    def test_missing_namespace_in_sitemap(self, mocker):
        # Arrange
        mock_response = mocker.Mock()
        mock_response.content = '''<?xml version="1.0" encoding="UTF-8"?>
            <urlset>
                <url><loc>https://example.com/page1</loc></url>
                <url><loc>https://example.com/page2</loc></url>
            </urlset>'''
        mock_get = mocker.patch('requests.get', return_value=mock_response)
        mock_log_error = mocker.patch('logging.error')

        # Act
        result = fetch_sitemap_urls('https://example.com/sitemap.xml')

        # Assert
        assert len(result) == 0
        mock_get.assert_called_once_with('https://example.com/sitemap.xml', timeout=10)
        mock_log_error.assert_called_once()

    # Handles empty or None sitemap_url parameter
    def test_empty_or_none_sitemap_url(self, mocker):
        # Arrange
        mock_get = mocker.patch('requests.get')
        mock_log_error = mocker.patch('logging.error')
    
        # Act
        result_empty = fetch_sitemap_urls('')
        result_none = fetch_sitemap_urls(None)
    
        # Assert
        assert result_empty == []
        assert result_none == []
        mock_get.assert_not_called()
        mock_log_error.assert_not_called()

    # Handles very large sitemaps without memory issues
    def test_large_sitemap_handling(self, mocker):
        # Arrange
        large_sitemap_content = '''<?xml version="1.0" encoding="UTF-8"?>
            <urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">''' + \
            ''.join(f'<url><loc>https://example.com/page{i}</loc></url>' for i in range(10000)) + \
            '</urlset>'
        mock_response = mocker.Mock()
        mock_response.content = large_sitemap_content
        mock_get = mocker.patch('requests.get', return_value=mock_response)
        mock_log = mocker.patch('logging.info')

        # Act
        result = fetch_sitemap_urls('https://example.com/large_sitemap.xml')

        # Assert
        assert len(result) == 10000
        assert 'https://example.com/page9999' in result
        mock_get.assert_called_once_with('https://example.com/large_sitemap.xml', timeout=10)
        mock_log.assert_called_once()

    # Respects the 10-second timeout setting for requests
    def test_timeout_setting(self, mocker):
        # Arrange
        mock_get = mocker.patch('requests.get')
        mock_get.side_effect = requests.exceptions.Timeout
        mock_log_error = mocker.patch('logging.error')
    
        # Act
        result = fetch_sitemap_urls('https://example.com/sitemap.xml')
    
        # Assert
        assert result == []
        mock_get.assert_called_once_with('https://example.com/sitemap.xml', timeout=10)
        mock_log_error.assert_called_once()

    # Returns empty list instead of raising exceptions on errors
    def test_fetch_sitemap_urls_handles_errors(self, mocker):
        # Arrange
        mock_get = mocker.patch('requests.get', side_effect=requests.exceptions.RequestException)
        mock_log_error = mocker.patch('logging.error')

        # Act
        result = fetch_sitemap_urls('https://example.com/sitemap.xml')

        # Assert
        assert result == []
        mock_get.assert_called_once_with('https://example.com/sitemap.xml', timeout=10)
        mock_log_error.assert_called_once()

    # Uses proper XML namespace handling for sitemap standard
    def test_fetch_sitemap_urls_with_namespace(self, mocker):
        # Arrange
        mock_response = mocker.Mock()
        mock_response.content = '''<?xml version="1.0" encoding="UTF-8"?>
            <urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
                <url><loc>https://example.com/page1</loc></url>
                <url><loc>https://example.com/page2</loc></url>
            </urlset>'''
        mock_get = mocker.patch('requests.get', return_value=mock_response)
        mock_log_info = mocker.patch('logging.info')
        mock_log_error = mocker.patch('logging.error')

        # Act
        result = fetch_sitemap_urls('https://example.com/sitemap.xml')

        # Assert
        assert len(result) == 2
        assert 'https://example.com/page1' in result
        assert 'https://example.com/page2' in result
        mock_get.assert_called_once_with('https://example.com/sitemap.xml', timeout=10)
        mock_log_info.assert_called_once()
        mock_log_error.assert_not_called()

    # Properly catches and logs different types of exceptions
    def test_fetch_sitemap_urls_handles_exceptions(self, mocker):
        # Arrange
        mock_get = mocker.patch('requests.get', side_effect=requests.exceptions.RequestException("Network error"))
        mock_log_error = mocker.patch('logging.error')
    
        # Act
        result = fetch_sitemap_urls('https://example.com/sitemap.xml')
    
        # Assert
        assert result == []
        mock_get.assert_called_once_with('https://example.com/sitemap.xml', timeout=10)
        mock_log_error.assert_any_call("Error fetching sitemap https://example.com/sitemap.xml: Network error")
    
        # Test for XML parsing error
        mock_get = mocker.patch('requests.get', return_value=mocker.Mock(content='invalid xml'))
        mock_parse_error = mocker.patch('xml.etree.ElementTree.fromstring', side_effect=ET.ParseError("Parse error"))
    
        # Act
        result = fetch_sitemap_urls('https://example.com/sitemap.xml')
    
        # Assert
        assert result == []
        mock_log_error.assert_any_call("Error parsing sitemap XML https://example.com/sitemap.xml: Parse error")